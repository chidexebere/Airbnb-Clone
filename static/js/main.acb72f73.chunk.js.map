{"version":3,"sources":["components/flat.js","components/marker.js","App.js","serviceWorker.js","index.js"],"names":["Flat","handleClick","_this","props","selectFlat","flat","title","this","price","priceCurrency","name","style","backgroundImage","concat","imageUrl","react_default","a","createElement","className","onClick","React","Component","Marker","classes","selected","text","APIkey","process","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","setState","selectedFlat","handleSearch","event","search","target","value","flats","state","allFlats","filter","RegExp","exec","_this2","fetch","then","response","json","data","_this3","center","lat","lng","type","placeholder","onChange","map","src_components_flat","key","lib_default","bootstrapURLKeys","zoom","components_marker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acb72f73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./flat.css\";\r\n\r\nclass Flat extends React.Component {\r\n    handleClick = () => {\r\n        this.props.selectFlat(this.props.flat);\r\n    }\r\n    render() {\r\n        const title = this.props.flat.price\r\n            + this.props.flat.priceCurrency +\r\n            \" - \" + this.props.flat.name;\r\n\r\n        const style = {\r\n            backgroundImage: `url('${this.props.flat.imageUrl}')`\r\n        };\r\n        return (\r\n            <div className= \"flat\"onClick= {this.handleClick}>\r\n                <div className= \"flat-picture\" style= {style}></div>\r\n                <div className= \"flat-title\">\r\n                    {title}\r\n                     \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Flat;","import React from \"react\";\r\nimport \"./marker.css\";\r\n\r\nclass Marker extends React.Component {\r\n    render() {\r\n        let classes = \"marker\";\r\n        if (this.props.selected) {\r\n            classes += \" selected\";\r\n        }\r\n        return (\r\n            <div className = {classes}>\r\n                {this.props.text}â‚¬\r\n            </div>);\r\n\r\n    }\r\n        \r\n}\r\n\r\nexport default Marker;\r\n","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Flat from './components/flat';\nimport Marker from './components/marker';\n\nconst APIkey=`${process.env.REACT_APP_API_KEY}`;\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        flats: [],\n        allFlats: [],\n        selectedFlat : null,\n        search: \"\"\n      };\n  }\n\n  componentDidMount() {\n    const url = \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/flats.json\";\n    fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({\n          flats: data,\n          allFlats: data\n\n        });\n      })\n  }\n\n  selectFlat = (flat) => {\n    console.log(flat)\n    this.setState({\n      \n      selectedFlat: flat\n    })\n  } \n\n  handleSearch = (event) => {\n     this.setState({\n       search: event.target.value,\n       flats: this.state.allFlats.filter((flat) => new RegExp(event.target.value, \"i\").exec(flat.name))\n     });\n  }\n\n\n  render() {\n    let center = {\n      lat : 48.8566,\n      lng : 2.3522\n    }\n    \n\n    if (this.state.selectedFlat) {\n      center = {\n        lat: this.state.selectedFlat.lat,\n        lng: this.state.selectedFlat.lng\n      }\n    }\n\n    return (\n      <div className = \"app\">\n        <div className = \"main\">\n          <div className = \"search\">\n            <input\n            type= \"text\"\n            placeholder= \"Search...\"\n            value= {this.state.search}\n            onChange= {this.handleSearch} />\n          </div>\n          <div className = \"flats\">\n            {this.state.flats.map(flat => {\n              return <Flat \n              key= {flat.name} \n              flat={flat}\n              selectFlat ={this.selectFlat} />\n            })}\n          </div>\n        </div>\n        <div className = \"map\">\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: APIkey }}\n          center = {center}\n          zoom = {11}\n        >\n          {this.state.flats.map(flat => {\n              return <Marker \n              key= {flat.name} \n              lat={flat.lat} \n              lng={flat.lng} \n              text={flat.price}\n              selected= {flat === this.state.selectedFlat} />\n            })}\n        </GoogleMapReact> \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import Hello from './components/hello';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Nonte this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}